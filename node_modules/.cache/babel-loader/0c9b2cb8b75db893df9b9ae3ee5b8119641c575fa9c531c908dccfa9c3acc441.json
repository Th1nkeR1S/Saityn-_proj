{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\Frontas\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Modal from './Components/Modal';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport Login from './Pages/Login'; // Import the Login component\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosInstance = axios.create({\n  baseURL: 'https://localhost:5133/api',\n  headers: {\n    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n    'Content-Type': 'application/json'\n  }\n});\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [expandedMovieId, setExpandedMovieId] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [posts, setPosts] = useState({});\n  const [comments, setComments] = useState({});\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: ''\n  });\n  const [newPost, setNewPost] = useState({\n    title: '',\n    body: ''\n  });\n  const [newComment, setNewComment] = useState({\n    content: ''\n  });\n  const navigate = useNavigate();\n  const isLoggedIn = localStorage.getItem('accessToken') !== null;\n  const movieTitleRef = useRef(null);\n  const movieDescriptionRef = useRef(null);\n  const postTitleRef = useRef(null);\n  const postBodyRef = useRef(null);\n  const commentContentRef = useRef(null);\n  useEffect(() => {\n    const loadMovies = async () => {\n      try {\n        const response = await axiosInstance.get('/movies');\n        setMovies(response.data);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    if (isLoggedIn) {\n      loadMovies();\n    }\n  }, [isLoggedIn]);\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n  const handleLogout = () => {\n    localStorage.removeItem('accessToken');\n    navigate('/login');\n  };\n  const MovieList = () => {\n    const loadPosts = async movieId => {\n      try {\n        const response = await axiosInstance.get(`/movies/${movieId}/posts`);\n        setPosts(prev => ({\n          ...prev,\n          [movieId]: response.data\n        }));\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    const loadComments = async (movieId, postId) => {\n      try {\n        const response = await axiosInstance.get(`/movies/${movieId}/posts/${postId}/comments`);\n        setComments(prev => ({\n          ...prev,\n          [postId]: response.data\n        }));\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    const handleCreateMovie = async e => {\n      e.preventDefault();\n      try {\n        const newMovieData = {\n          title: movieTitleRef.current.value,\n          description: movieDescriptionRef.current.value\n        };\n        const response = await axiosInstance.post('/movies', newMovieData);\n        setMovies(prev => [...prev, response.data]);\n        movieTitleRef.current.value = '';\n        movieDescriptionRef.current.value = '';\n      } catch (error) {\n        console.error('Error creating movie:', error);\n      }\n    };\n    const handleCreatePost = async (movieId, e) => {\n      e.preventDefault();\n      try {\n        // Decode the access token to extract the UserId\n        const token = localStorage.getItem('accessToken');\n        if (token) {\n          const decodedToken = jwtDecode(token);\n          const userId = decodedToken.sub; // Assuming 'sub' contains the UserId in the token\n\n          // Prepare the new post data, including the UserId\n          const newPostData = {\n            title: postTitleRef.current.value,\n            body: postBodyRef.current.value,\n            userId: userId // Add the UserId here\n          };\n\n          // Send the request to create a post\n          const response = await axiosInstance.post(`/movies/${movieId}/posts`, newPostData);\n          setPosts(prev => ({\n            ...prev,\n            [movieId]: [...(prev[movieId] || []), response.data]\n          }));\n          postTitleRef.current.value = '';\n          postBodyRef.current.value = '';\n        } else {\n          console.error('No access token found.');\n        }\n      } catch (error) {\n        console.error('Error creating post:', error);\n      }\n    };\n    const handleCreateComment = async (movieId, postId, e) => {\n      e.preventDefault();\n      try {\n        const newCommentData = {\n          content: commentContentRef.current.value\n        };\n        const response = await axiosInstance.post(`/movies/${movieId}/posts/${postId}/comments`, newCommentData);\n        setComments(prev => ({\n          ...prev,\n          [postId]: [...(prev[postId] || []), response.data]\n        }));\n        commentContentRef.current.value = '';\n      } catch (error) {\n        console.error('Error creating comment:', error);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Movies List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCreateMovie,\n          className: \"movie-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Create New Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            ref: movieTitleRef,\n            placeholder: \"Movie Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            ref: movieDescriptionRef,\n            placeholder: \"Movie Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-list\",\n          children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setExpandedMovieId(prev => prev === movie.id ? null : movie.id);\n                loadPosts(movie.id);\n              },\n              children: expandedMovieId === movie.id ? 'Hide Details' : 'Show Posts'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 37\n            }, this), expandedMovieId === movie.id && posts[movie.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"posts\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Posts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: e => handleCreatePost(movie.id, e),\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  ref: postTitleRef,\n                  placeholder: \"Post Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  ref: postBodyRef,\n                  placeholder: \"Post Body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  children: \"Add Post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 45\n              }, this), posts[movie.id].length > 0 ? posts[movie.id].map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: post.body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => loadComments(movie.id, post.id),\n                  children: \"Show Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 57\n                }, this), comments[post.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comments\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: \"Comments:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                    onSubmit: e => handleCreateComment(movie.id, post.id, e),\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      ref: commentContentRef,\n                      placeholder: \"Comment Content\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 223,\n                      columnNumber: 69\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"submit\",\n                      children: \"Add Comment\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 69\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 65\n                  }, this), comments[post.id].length > 0 ? comments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: comment.content\n                  }, comment.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 73\n                  }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"No comments available.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 69\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 61\n                }, this)]\n              }, post.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 53\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No posts available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 41\n            }, this)]\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading movies...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), modalVisible && /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(MovieList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"W3qIymfEjH0HyMngTn5k0d8ruHc=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","Header","Footer","Modal","Route","Routes","useNavigate","Login","jwtDecode","jsxDEV","_jsxDEV","axiosInstance","create","baseURL","headers","localStorage","getItem","App","_s","movies","setMovies","expandedMovieId","setExpandedMovieId","modalVisible","setModalVisible","posts","setPosts","comments","setComments","newMovie","setNewMovie","title","description","newPost","setNewPost","body","newComment","setNewComment","content","navigate","isLoggedIn","movieTitleRef","movieDescriptionRef","postTitleRef","postBodyRef","commentContentRef","loadMovies","response","get","data","error","console","fileName","_jsxFileName","lineNumber","columnNumber","handleLogout","removeItem","MovieList","loadPosts","movieId","prev","loadComments","postId","handleCreateMovie","e","preventDefault","newMovieData","current","value","post","handleCreatePost","token","decodedToken","userId","sub","newPostData","handleCreateComment","newCommentData","className","children","onClick","onSubmit","type","ref","placeholder","length","map","movie","id","comment","path","element","_c","$RefreshReg$"],"sources":["C:/Users/marka/Frontas/my-app/src/App.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Modal from './Components/Modal';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport Login from './Pages/Login'; // Import the Login component\nimport { jwtDecode } from 'jwt-decode';\n\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://localhost:5133/api',\n    headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json',\n    }\n});\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n    const [expandedMovieId, setExpandedMovieId] = useState(null);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [posts, setPosts] = useState({});\n    const [comments, setComments] = useState({});\n    const [newMovie, setNewMovie] = useState({ title: '', description: '' });\n    const [newPost, setNewPost] = useState({ title: '', body: '' });\n    const [newComment, setNewComment] = useState({ content: '' });\n\n    const navigate = useNavigate();\n    const isLoggedIn = localStorage.getItem('accessToken') !== null;\n\n    const movieTitleRef = useRef(null);\n    const movieDescriptionRef = useRef(null);\n    const postTitleRef = useRef(null);\n    const postBodyRef = useRef(null);\n    const commentContentRef = useRef(null);\n\n    useEffect(() => {\n        const loadMovies = async () => {\n            try {\n                const response = await axiosInstance.get('/movies');\n                setMovies(response.data);\n            } catch (error) {\n                console.error('Error fetching movies:', error);\n            }\n        };\n\n        if (isLoggedIn) {\n            loadMovies();\n        }\n    }, [isLoggedIn]);\n\n    if (!isLoggedIn) {\n        return <Login />;\n    }\n\n    const handleLogout = () => {\n        localStorage.removeItem('accessToken');\n        navigate('/login');\n    };\n\n    const MovieList = () => {\n        const loadPosts = async (movieId) => {\n            try {\n                const response = await axiosInstance.get(`/movies/${movieId}/posts`);\n                setPosts((prev) => ({ ...prev, [movieId]: response.data }));\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        };\n\n        const loadComments = async (movieId, postId) => {\n            try {\n                const response = await axiosInstance.get(`/movies/${movieId}/posts/${postId}/comments`);\n                setComments((prev) => ({\n                    ...prev,\n                    [postId]: response.data,\n                }));\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        };\n\n        const handleCreateMovie = async (e) => {\n            e.preventDefault();\n            try {\n                const newMovieData = {\n                    title: movieTitleRef.current.value,\n                    description: movieDescriptionRef.current.value,\n                };\n                const response = await axiosInstance.post('/movies', newMovieData);\n                setMovies((prev) => [...prev, response.data]);\n                movieTitleRef.current.value = '';\n                movieDescriptionRef.current.value = '';\n            } catch (error) {\n                console.error('Error creating movie:', error);\n            }\n        };\n\n        const handleCreatePost = async (movieId, e) => {\n            e.preventDefault();\n            try {\n                // Decode the access token to extract the UserId\n                const token = localStorage.getItem('accessToken');\n                if (token) {\n                    const decodedToken = jwtDecode(token);\n                    const userId = decodedToken.sub; // Assuming 'sub' contains the UserId in the token\n                    \n                    // Prepare the new post data, including the UserId\n                    const newPostData = {\n                        title: postTitleRef.current.value,\n                        body: postBodyRef.current.value,\n                        userId: userId,  // Add the UserId here\n                    };\n\n                    // Send the request to create a post\n                    const response = await axiosInstance.post(`/movies/${movieId}/posts`, newPostData);\n                    setPosts((prev) => ({\n                        ...prev,\n                        [movieId]: [...(prev[movieId] || []), response.data],\n                    }));\n                    postTitleRef.current.value = '';\n                    postBodyRef.current.value = '';\n                } else {\n                    console.error('No access token found.');\n                }\n            } catch (error) {\n                console.error('Error creating post:', error);\n            }\n        };\n\n        const handleCreateComment = async (movieId, postId, e) => {\n            e.preventDefault();\n            try {\n                const newCommentData = {\n                    content: commentContentRef.current.value,\n                };\n                const response = await axiosInstance.post(\n                    `/movies/${movieId}/posts/${postId}/comments`,\n                    newCommentData\n                );\n                setComments((prev) => ({\n                    ...prev,\n                    [postId]: [...(prev[postId] || []), response.data],\n                }));\n                commentContentRef.current.value = '';\n            } catch (error) {\n                console.error('Error creating comment:', error);\n            }\n        };\n\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"content\">\n                    <h1>Movies List</h1>\n                    <button onClick={handleLogout}>Logout</button>\n\n                    <form onSubmit={handleCreateMovie} className=\"movie-form\">\n                        <h2>Create New Movie</h2>\n                        <input\n                            type=\"text\"\n                            ref={movieTitleRef}\n                            placeholder=\"Movie Title\"\n                        />\n                        <textarea\n                            ref={movieDescriptionRef}\n                            placeholder=\"Movie Description\"\n                        ></textarea>\n                        <button type=\"submit\">Add Movie</button>\n                    </form>\n\n                    {movies.length > 0 ? (\n                        <div className=\"movie-list\">\n                            {movies.map((movie) => (\n                                <div className=\"movie-item\" key={movie.id}>\n                                    <h2>{movie.title}</h2>\n                                    <p>{movie.description}</p>\n                                    <button\n                                        onClick={() => {\n                                            setExpandedMovieId((prev) =>\n                                                prev === movie.id ? null : movie.id\n                                            );\n                                            loadPosts(movie.id);\n                                        }}\n                                    >\n                                        {expandedMovieId === movie.id ? 'Hide Details' : 'Show Posts'}\n                                    </button>\n                                    {expandedMovieId === movie.id && posts[movie.id] && (\n                                        <div className=\"posts\">\n                                            <h3>Posts:</h3>\n                                            <form onSubmit={(e) => handleCreatePost(movie.id, e)}>\n                                                <input\n                                                    type=\"text\"\n                                                    ref={postTitleRef}\n                                                    placeholder=\"Post Title\"\n                                                />\n                                                <textarea\n                                                    ref={postBodyRef}\n                                                    placeholder=\"Post Body\"\n                                                ></textarea>\n                                                <button type=\"submit\">Add Post</button>\n                                            </form>\n                                            {posts[movie.id].length > 0 ? (\n                                                posts[movie.id].map((post) => (\n                                                    <div className=\"post-item\" key={post.id}>\n                                                        <h4>{post.title}</h4>\n                                                        <p>{post.body}</p>\n                                                        <button\n                                                            onClick={() => loadComments(movie.id, post.id)}\n                                                        >\n                                                            Show Comments\n                                                        </button>\n                                                        {comments[post.id] && (\n                                                            <div className=\"comments\">\n                                                                <h5>Comments:</h5>\n                                                                <form\n                                                                    onSubmit={(e) =>\n                                                                        handleCreateComment(movie.id, post.id, e)\n                                                                    }\n                                                                >\n                                                                    <input\n                                                                        type=\"text\"\n                                                                        ref={commentContentRef}\n                                                                        placeholder=\"Comment Content\"\n                                                                    />\n                                                                    <button type=\"submit\">Add Comment</button>\n                                                                </form>\n                                                                {comments[post.id].length > 0 ? (\n                                                                    comments[post.id].map((comment) => (\n                                                                        <p key={comment.id}>{comment.content}</p>\n                                                                    ))\n                                                                ) : (\n                                                                    <p>No comments available.</p>\n                                                                )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                ))\n                                            ) : (\n                                                <p>No posts available.</p>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                    ) : (\n                        <p>Loading movies...</p>\n                    )}\n                </div>\n                {modalVisible && <Modal />}\n                <Footer />\n            </div>\n        );\n    };\n\n    return (\n        <Routes>\n            <Route path=\"/\" element={<MovieList />} />\n            <Route path=\"/login\" element={<Login />} />\n        </Routes>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
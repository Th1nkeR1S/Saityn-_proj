{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\Frontas\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const loadMovies = async () => {\n      try {\n        const response = await axios.get('http://urchin-app-dpbse.ondigitalocean.app/api/movies');\n        //const response = await axios.get('https://localhost:5133/api/movies');\n        // Directly set the movies array from the response\n        setMovies(response.data); // Assuming response.data is the array of movies\n      } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n      }\n    };\n    loadMovies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movies.length > 0 ? movies.map(movie => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [movie.title, \" - \", movie.description]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","movies","setMovies","loadMovies","response","get","data","error","console","children","length","map","movie","title","description","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marka/Frontas/my-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n    const [movies, setMovies] = useState([]);\n\n    \n\n    useEffect(() => {\n        const loadMovies = async () => {\n            try {\n                const response = await axios.get('http://urchin-app-dpbse.ondigitalocean.app/api/movies');\n                //const response = await axios.get('https://localhost:5133/api/movies');\n                // Directly set the movies array from the response\n                setMovies(response.data); // Assuming response.data is the array of movies\n                \n            } catch (error) {\n                console.error(\"Error fetching movies:\", error);\n            }\n        };\n\n        loadMovies();\n    }, []);\n\n    return (\n        <>\n            {movies.length > 0 ? (\n                movies.map((movie) => (\n                    <p key={movie.id}>\n                        {movie.title} - {movie.description}\n                    </p>\n                ))\n            ) : (\n                <p>Loading movies...</p>\n            )}\n        </>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAIxCC,SAAS,CAAC,MAAM;IACZ,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,uDAAuD,CAAC;QACzF;QACA;QACAH,SAAS,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAE9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA,CAAAE,SAAA;IAAAW,QAAA,EACKR,MAAM,CAACS,MAAM,GAAG,CAAC,GACdT,MAAM,CAACU,GAAG,CAAEC,KAAK,iBACbhB,OAAA;MAAAa,QAAA,GACKG,KAAK,CAACC,KAAK,EAAC,KAAG,EAACD,KAAK,CAACE,WAAW;IAAA,GAD9BF,KAAK,CAACG,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEb,CACN,CAAC,gBAEFvB,OAAA;MAAAa,QAAA,EAAG;IAAiB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC1B,gBACH,CAAC;AAEX,CAAC;AAACnB,EAAA,CAlCID,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAoCT,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
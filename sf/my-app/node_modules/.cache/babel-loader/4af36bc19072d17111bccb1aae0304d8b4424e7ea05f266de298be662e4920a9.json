{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marka\\\\Frontas\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [expandedMovieId, setExpandedMovieId] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [posts, setPosts] = useState({});\n  const [comments, setComments] = useState({});\n  const navigate = useNavigate();\n  const isLoggedIn = localStorage.getItem('accessToken') !== null;\n  const movieTitleRef = useRef(null);\n  const movieDescriptionRef = useRef(null);\n  const postTitleRef = useRef(null);\n  const postBodyRef = useRef(null);\n  const commentContentRef = useRef(null);\n\n  // Extract userId from the token\n  const userID = isLoggedIn ? jwtDecode(localStorage.getItem('accessToken')).sub : null;\n  useEffect(() => {\n    const loadMovies = async () => {\n      try {\n        const response = await axiosInstance.get('/movies');\n        setMovies(response.data);\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    if (isLoggedIn) {\n      loadMovies();\n    }\n  }, [isLoggedIn]);\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this);\n  }\n  const handleLogout = () => {\n    localStorage.removeItem('accessToken');\n    navigate('/login');\n  };\n  const MovieList = () => {\n    const loadPosts = async movieId => {\n      try {\n        const response = await axiosInstance.get(`/movies/${movieId}/posts`);\n        setPosts(prev => ({\n          ...prev,\n          [movieId]: response.data\n        }));\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    const loadComments = async (movieId, postId) => {\n      try {\n        const response = await axiosInstance.get(`/movies/${movieId}/posts/${postId}/comments`);\n        setComments(prev => ({\n          ...prev,\n          [postId]: response.data\n        }));\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    const handleCreateMovie = async e => {\n      e.preventDefault();\n      try {\n        const newMovieData = {\n          title: movieTitleRef.current.value,\n          description: movieDescriptionRef.current.value,\n          userId: userID\n        };\n        const response = await axiosInstance.post('/movies', newMovieData);\n        setMovies(prev => [...prev, response.data]);\n        movieTitleRef.current.value = '';\n        movieDescriptionRef.current.value = '';\n        setModalVisible(false); // Close modal after submitting\n      } catch (error) {\n        console.error('Error creating movie:', error);\n      }\n    };\n    const handleCreatePost = async (movieId, e) => {\n      e.preventDefault();\n      const newPostData = {\n        title: postTitleRef.current.value,\n        body: postBodyRef.current.value,\n        userId: userID\n      };\n      try {\n        const response = await axiosInstance.post(`/movies/${movieId}/posts`, newPostData);\n        setPosts(prev => ({\n          ...prev,\n          [movieId]: [...(prev[movieId] || []), response.data]\n        }));\n        postTitleRef.current.value = '';\n        postBodyRef.current.value = '';\n      } catch (error) {\n        console.error('Error creating post:', error);\n      }\n    };\n    const handleCreateComment = async (movieId, postId, e) => {\n      e.preventDefault();\n      try {\n        const newCommentData = {\n          content: commentContentRef.current.value,\n          userId: userID\n        };\n        const response = await axiosInstance.post(`/movies/${movieId}/posts/${postId}/comments`, newCommentData);\n        setComments(prev => ({\n          ...prev,\n          [postId]: [...(prev[postId] || []), response.data]\n        }));\n        commentContentRef.current.value = '';\n      } catch (error) {\n        console.error('Error creating comment:', error);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Movies List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setModalVisible(true),\n          className: \"create-movie-btn\",\n          children: \"Create New Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 19\n        }, this), modalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Create New Movie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleCreateMovie,\n            className: \"movie-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: movieTitleRef,\n              placeholder: \"Movie Title\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              ref: movieDescriptionRef,\n              placeholder: \"Movie Description\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Add Movie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setModalVisible(false),\n              className: \"close-modal-btn\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 23\n        }, this), movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-list\",\n          children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"movie-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: movie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: movie.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setExpandedMovieId(prev => prev === movie.id ? null : movie.id);\n                loadPosts(movie.id);\n              },\n              children: expandedMovieId === movie.id ? 'Hide Details' : 'Show Posts'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 35\n            }, this), expandedMovieId === movie.id && posts[movie.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"posts\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Posts:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: e => handleCreatePost(movie.id, e),\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  ref: postTitleRef,\n                  placeholder: \"Post Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  ref: postBodyRef,\n                  placeholder: \"Post Body\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  children: \"Add Post\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 47\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 43\n              }, this), posts[movie.id].length > 0 ? posts[movie.id].map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 55\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: post.body\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 55\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => loadComments(movie.id, post.id),\n                  children: \"Show Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 55\n                }, this), comments[post.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comments\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: \"Comments:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 63\n                  }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                    onSubmit: e => handleCreateComment(movie.id, post.id, e),\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      ref: commentContentRef,\n                      placeholder: \"Comment Content\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 216,\n                      columnNumber: 67\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"submit\",\n                      children: \"Add Comment\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 67\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 63\n                  }, this), comments[post.id].length > 0 ? comments[post.id].map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: comment.content\n                  }, comment.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 71\n                  }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"No comments available.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 67\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 59\n                }, this)]\n              }, post.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 51\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No posts available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 47\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 39\n            }, this)]\n          }, movie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 31\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading movies...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 23\n        }, this), userID && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Logged-in User ID: \", userID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(MovieList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"Jvi55E6jTEd+pAl93rZcbzTBaZE=\", true);\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","movies","setMovies","useState","expandedMovieId","setExpandedMovieId","modalVisible","setModalVisible","posts","setPosts","comments","setComments","navigate","useNavigate","isLoggedIn","localStorage","getItem","movieTitleRef","useRef","movieDescriptionRef","postTitleRef","postBodyRef","commentContentRef","userID","jwtDecode","sub","useEffect","loadMovies","response","axiosInstance","get","data","error","console","_jsxDEV","Login","fileName","_jsxFileName","lineNumber","columnNumber","handleLogout","removeItem","MovieList","loadPosts","movieId","prev","loadComments","postId","handleCreateMovie","e","preventDefault","newMovieData","title","current","value","description","userId","post","handleCreatePost","newPostData","body","handleCreateComment","newCommentData","content","className","children","Header","onLogout","onClick","Modal","onSubmit","type","ref","placeholder","required","length","map","movie","id","comment","Footer","Routes","Route","path","element","_c","$RefreshReg$"],"sources":["C:/Users/marka/Frontas/my-app/src/App.js"],"sourcesContent":["const App = () => {\n  const [movies, setMovies] = useState([]);\n  const [expandedMovieId, setExpandedMovieId] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [posts, setPosts] = useState({});\n  const [comments, setComments] = useState({});\n\n  const navigate = useNavigate();\n  const isLoggedIn = localStorage.getItem('accessToken') !== null;\n\n  const movieTitleRef = useRef(null);\n  const movieDescriptionRef = useRef(null);\n  const postTitleRef = useRef(null);\n  const postBodyRef = useRef(null);\n  const commentContentRef = useRef(null);\n\n  // Extract userId from the token\n  const userID = isLoggedIn ? jwtDecode(localStorage.getItem('accessToken')).sub : null;\n\n  useEffect(() => {\n      const loadMovies = async () => {\n          try {\n              const response = await axiosInstance.get('/movies');\n              setMovies(response.data);\n          } catch (error) {\n              console.error('Error fetching movies:', error);\n          }\n      };\n\n      if (isLoggedIn) {\n          loadMovies();\n      }\n  }, [isLoggedIn]);\n\n  if (!isLoggedIn) {\n      return <Login />;\n  }\n\n  const handleLogout = () => {\n      localStorage.removeItem('accessToken');\n      navigate('/login');\n  };\n\n  const MovieList = () => {\n      const loadPosts = async (movieId) => {\n          try {\n              const response = await axiosInstance.get(`/movies/${movieId}/posts`);\n              setPosts((prev) => ({ ...prev, [movieId]: response.data }));\n          } catch (error) {\n              console.error('Error fetching posts:', error);\n          }\n      };\n\n      const loadComments = async (movieId, postId) => {\n          try {\n              const response = await axiosInstance.get(`/movies/${movieId}/posts/${postId}/comments`);\n              setComments((prev) => ({\n                  ...prev,\n                  [postId]: response.data,\n              }));\n          } catch (error) {\n              console.error('Error fetching comments:', error);\n          }\n      };\n\n      const handleCreateMovie = async (e) => {\n          e.preventDefault();\n          try {\n              const newMovieData = {\n                  title: movieTitleRef.current.value,\n                  description: movieDescriptionRef.current.value,\n                  userId: userID, \n              };\n              const response = await axiosInstance.post('/movies', newMovieData);\n              setMovies((prev) => [...prev, response.data]);\n              movieTitleRef.current.value = '';\n              movieDescriptionRef.current.value = '';\n              setModalVisible(false); // Close modal after submitting\n          } catch (error) {\n              console.error('Error creating movie:', error);\n          }\n      };\n\n      const handleCreatePost = async (movieId, e) => {\n          e.preventDefault();\n\n          const newPostData = {\n              title: postTitleRef.current.value,\n              body: postBodyRef.current.value,\n              userId: userID,\n          };\n\n          try {\n              const response = await axiosInstance.post(`/movies/${movieId}/posts`, newPostData);\n              setPosts((prev) => ({\n                  ...prev,\n                  [movieId]: [...(prev[movieId] || []), response.data],\n              }));\n\n              postTitleRef.current.value = '';\n              postBodyRef.current.value = '';\n          } catch (error) {\n              console.error('Error creating post:', error);\n          }\n      };\n\n      const handleCreateComment = async (movieId, postId, e) => {\n          e.preventDefault();\n          try {\n              const newCommentData = {\n                  content: commentContentRef.current.value,\n                  userId: userID,\n              };\n              const response = await axiosInstance.post(\n                  `/movies/${movieId}/posts/${postId}/comments`,\n                  newCommentData\n              );\n              setComments((prev) => ({\n                  ...prev,\n                  [postId]: [...(prev[postId] || []), response.data],\n              }));\n              commentContentRef.current.value = '';\n          } catch (error) {\n              console.error('Error creating comment:', error);\n          }\n      };\n\n      return (\n          <div className=\"App\">\n              <Header onLogout={handleLogout} /> {/* Pass handleLogout to Header */}\n              <div className=\"content\">\n                  <h1>Movies List</h1>\n\n                  {/* Button to open the modal */}\n                  <button onClick={() => setModalVisible(true)} className=\"create-movie-btn\">\n                      Create New Movie\n                  </button>\n\n                  {/* Modal for creating a movie */}\n                  {modalVisible && (\n                      <Modal>\n                          <h2>Create New Movie</h2>\n                          <form onSubmit={handleCreateMovie} className=\"movie-form\">\n                              <input\n                                  type=\"text\"\n                                  ref={movieTitleRef}\n                                  placeholder=\"Movie Title\"\n                                  required\n                              />\n                              <textarea\n                                  ref={movieDescriptionRef}\n                                  placeholder=\"Movie Description\"\n                                  required\n                              ></textarea>\n                              <button type=\"submit\">Add Movie</button>\n                              <button\n                                  type=\"button\"\n                                  onClick={() => setModalVisible(false)}\n                                  className=\"close-modal-btn\"\n                              >\n                                  Close\n                              </button>\n                          </form>\n                      </Modal>\n                  )}\n\n                  {movies.length > 0 ? (\n                      <div className=\"movie-list\">\n                          {movies.map((movie) => (\n                              <div className=\"movie-item\" key={movie.id}>\n                                  <h2>{movie.title}</h2>\n                                  <p>{movie.description}</p>\n                                  <button\n                                      onClick={() => {\n                                          setExpandedMovieId((prev) =>\n                                              prev === movie.id ? null : movie.id\n                                          );\n                                          loadPosts(movie.id);\n                                      }}\n                                  >\n                                      {expandedMovieId === movie.id ? 'Hide Details' : 'Show Posts'}\n                                  </button>\n                                  {expandedMovieId === movie.id && posts[movie.id] && (\n                                      <div className=\"posts\">\n                                          <h3>Posts:</h3>\n                                          <form onSubmit={(e) => handleCreatePost(movie.id, e)}>\n                                              <input\n                                                  type=\"text\"\n                                                  ref={postTitleRef}\n                                                  placeholder=\"Post Title\"\n                                              />\n                                              <textarea\n                                                  ref={postBodyRef}\n                                                  placeholder=\"Post Body\"\n                                              ></textarea>\n                                              <button type=\"submit\">Add Post</button>\n                                          </form>\n                                          {posts[movie.id].length > 0 ? (\n                                              posts[movie.id].map((post) => (\n                                                  <div className=\"post-item\" key={post.id}>\n                                                      <h4>{post.title}</h4>\n                                                      <p>{post.body}</p>\n                                                      <button\n                                                          onClick={() => loadComments(movie.id, post.id)}\n                                                      >\n                                                          Show Comments\n                                                      </button>\n                                                      {comments[post.id] && (\n                                                          <div className=\"comments\">\n                                                              <h5>Comments:</h5>\n                                                              <form\n                                                                  onSubmit={(e) =>\n                                                                      handleCreateComment(movie.id, post.id, e)\n                                                                  }\n                                                              >\n                                                                  <input\n                                                                      type=\"text\"\n                                                                      ref={commentContentRef}\n                                                                      placeholder=\"Comment Content\"\n                                                                  />\n                                                                  <button type=\"submit\">Add Comment</button>\n                                                              </form>\n                                                              {comments[post.id].length > 0 ? (\n                                                                  comments[post.id].map((comment) => (\n                                                                      <p key={comment.id}>{comment.content}</p>\n                                                                  ))\n                                                              ) : (\n                                                                  <p>No comments available.</p>\n                                                              )}\n                                                          </div>\n                                                      )}\n                                                  </div>\n                                              ))\n                                          ) : (\n                                              <p>No posts available.</p>\n                                          )}\n                                      </div>\n                                  )}\n                              </div>\n                          ))}\n                      </div>\n                  ) : (\n                      <p>Loading movies...</p>\n                  )}\n                  {userID && <p>Logged-in User ID: {userID}</p>}\n              </div>\n              <Footer />\n          </div>\n      );\n  };\n\n  return (\n      <Routes>\n          <Route path=\"/\" element={<MovieList />} />\n          <Route path=\"/login\" element={<Login />} />\n      </Routes>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}